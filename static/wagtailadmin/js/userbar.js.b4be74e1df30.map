{"version":3,"sources":["webpack://wagtail/./client/src/entrypoints/admin/userbar.js"],"names":["document","addEventListener","userbar","querySelector","trigger","list","listItems","querySelectorAll","isActiveClass","showUserbar","shouldFocus","classList","add","setAttribute","sandboxClick","window","clickOutside","handleUserbarItemsKeyDown","setTimeout","setFocusToFirstItem","hideUserbar","remove","removeEventListener","length","firstElementChild","focus","setFocusToLastItem","event","getAttribute","key","activeElement","closest","preventDefault","forEach","element","idx","e2","stopPropagation","contains"],"mappings":"AAGAA,SAASC,iBAAiB,oBAAoB,WAC1C,IAAIC,EAAUF,SAASG,cAAc,0BACjCC,EAAUF,EAAQC,cAAc,kCAChCE,EAAOH,EAAQC,cAAc,eAC7BG,EAAYD,EAAKE,iBAAiB,MAClCC,EAAgB,YAYpB,SAASC,EAAYC,GACjBR,EAAQS,UAAUC,IAAIJ,GACtBJ,EAAQS,aAAa,gBAAiB,QAEtCR,EAAKJ,iBAAiB,QAASa,GAAc,GAE7CC,OAAOd,iBAAiB,QAASe,GAAc,GAG/Cd,EAAQD,iBAAiB,UAAWgB,GAA2B,GAI3DP,GAEIL,EAAKF,cAxBW,0KAyBhBe,YAAW,WAEPC,MACD,KAIf,SAASC,IACLlB,EAAQS,UAAUU,OAAOb,GACzBJ,EAAQS,aAAa,gBAAiB,SAEtCR,EAAKJ,iBAAiB,QAASa,GAAc,GAE7CC,OAAOO,oBAAoB,QAASN,GAAc,GAGlDd,EAAQoB,oBAAoB,UAAWL,GAA2B,GAiBtE,SAASE,IACDb,EAAUiB,OAAS,GACnBL,YAAW,WACPZ,EAAU,GAAGkB,kBAAkBC,UAChC,KAGX,SAASC,IACDpB,EAAUiB,OAAS,GACnBL,YAAW,WACPZ,EAAUA,EAAUiB,OAAS,GAAGC,kBAAkBC,UACnD,KA2CX,SAASR,EAA0BU,GAE/B,GAA8C,SAA1CvB,EAAQwB,aAAa,sBAAzB,CACI,GAAkB,WAAdD,EAAME,IAGN,OAFAT,SA/DRF,YAAW,WAAc,OAAOd,EAAQqB,UAAY,KAmEhD,GAhEGzB,SAAS8B,eAAmB9B,SAAS8B,cAAcC,QAAQ,0BAiE1D,OAAQJ,EAAME,KACV,IAAK,YACDF,EAAMK,iBAlDtB1B,EAAU2B,SAAQ,SAAUC,EAASC,GAE7BD,EAAQV,oBAAsBxB,SAAS8B,eACvCZ,YAAW,WACHiB,EAAM,EAAI7B,EAAUiB,OAEpBjB,EAAU6B,EAAM,GAAGX,kBAAkBC,QAGrCN,MAEL,QAyCK,MACJ,IAAK,UACDQ,EAAMK,iBArCtB1B,EAAU2B,SAAQ,SAAUC,EAASC,GAC7BD,EAAQV,oBAAsBxB,SAAS8B,eACvCZ,YAAW,WACHiB,EAAM,EAEN7B,EAAU6B,EAAM,GAAGX,kBAAkBC,QAGrCC,MAEL,QA6BK,MACJ,IAAK,OACDC,EAAMK,iBACNb,IACA,MACJ,IAAK,MACDQ,EAAMK,iBACNN,MAoCpB,SAASZ,EAAasB,GAClBA,EAAGC,kBAEP,SAASrB,IACLI,IA9KJhB,EAAQH,iBAAiB,SAyCzB,SAAuBmC,GACnBA,EAAGC,kBACCnC,EAAQS,UAAU2B,SAAS9B,GAC3BY,IAGAX,GAAY,MA/C6B,GAGjDM,OAAOd,iBAAiB,WAAYmB,GAAa,GAGjDlB,EAAQD,iBAAiB,WA6IzB,SAA8B0B,GAE1B,GAAIvB,IAAYJ,SAAS8B,eAA2D,UAA1C1B,EAAQwB,aAAa,iBAC3D,OAAQD,EAAME,KACV,IAAK,UACDF,EAAMK,iBACNvB,GAAY,GAGZS,YAAW,WAAc,OAAOQ,MAAyB,KACzD,MACJ,IAAK,YACDC,EAAMK,iBACNvB,GAAY,GAGZS,YAAW,WAAc,OAAOC,MAA0B","file":"wagtail/admin/static/wagtailadmin/js/userbar.js","sourcesContent":["// This entrypoint is not bundled with any polyfills to keep it as light as possible\n// Please stick to old JS APIs and avoid importing anything that might require a vendored module\n// More background can be found in webpack.config.js\ndocument.addEventListener('DOMContentLoaded', function () {\n    var userbar = document.querySelector('[data-wagtail-userbar]');\n    var trigger = userbar.querySelector('[data-wagtail-userbar-trigger]');\n    var list = userbar.querySelector('[role=menu]');\n    var listItems = list.querySelectorAll('li');\n    var isActiveClass = 'is-active';\n    // querySelector for all items that can be focused.\n    // source: https://stackoverflow.com/questions/1599660/which-html-elements-can-receive-focus\n    var focusableItemSelector = \"a[href]:not([tabindex='-1']),\\n    button:not([disabled]):not([tabindex='-1']),\\n    input:not([disabled]):not([tabindex='-1']),\\n    [tabindex]:not([tabindex='-1'])\";\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    trigger.addEventListener('click', toggleUserbar, false);\n    // make sure userbar is hidden when navigating back\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    window.addEventListener('pageshow', hideUserbar, false);\n    // Handle keyboard events on the trigger\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    userbar.addEventListener('keydown', handleTriggerKeyDown);\n    function showUserbar(shouldFocus) {\n        userbar.classList.add(isActiveClass);\n        trigger.setAttribute('aria-expanded', 'true');\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        list.addEventListener('click', sandboxClick, false);\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        window.addEventListener('click', clickOutside, false);\n        // Start handling keyboard input now that the userbar is open.\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        userbar.addEventListener('keydown', handleUserbarItemsKeyDown, false);\n        // The userbar has role=menu which means that the first link should be focused on popup\n        // For weird reasons shifting focus only works after some amount of delay\n        // Which is why we are forced to use setTimeout\n        if (shouldFocus) {\n            // Find the first focusable element (if any) and focus it\n            if (list.querySelector(focusableItemSelector)) {\n                setTimeout(function () {\n                    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n                    setFocusToFirstItem();\n                }, 300); // Less than 300ms doesn't seem to work\n            }\n        }\n    }\n    function hideUserbar() {\n        userbar.classList.remove(isActiveClass);\n        trigger.setAttribute('aria-expanded', 'false');\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        list.addEventListener('click', sandboxClick, false);\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        window.removeEventListener('click', clickOutside, false);\n        // Cease handling keyboard input now that the userbar is closed.\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        userbar.removeEventListener('keydown', handleUserbarItemsKeyDown, false);\n    }\n    function toggleUserbar(e2) {\n        e2.stopPropagation();\n        if (userbar.classList.contains(isActiveClass)) {\n            hideUserbar();\n        }\n        else {\n            showUserbar(true);\n        }\n    }\n    function setFocusToTrigger() {\n        setTimeout(function () { return trigger.focus(); }, 300);\n    }\n    function isFocusOnItems() {\n        return document.activeElement && !!document.activeElement.closest('.wagtail-userbar-items');\n    }\n    function setFocusToFirstItem() {\n        if (listItems.length > 0) {\n            setTimeout(function () {\n                listItems[0].firstElementChild.focus();\n            }, 100); // Workaround for focus bug\n        }\n    }\n    function setFocusToLastItem() {\n        if (listItems.length > 0) {\n            setTimeout(function () {\n                listItems[listItems.length - 1].firstElementChild.focus();\n            }, 100); // Workaround for focus bug\n        }\n    }\n    function setFocusToNextItem() {\n        listItems.forEach(function (element, idx) {\n            // Check which item is currently focused\n            if (element.firstElementChild === document.activeElement) {\n                setTimeout(function () {\n                    if (idx + 1 < listItems.length) {\n                        // Focus the next item\n                        listItems[idx + 1].firstElementChild.focus();\n                    }\n                    else {\n                        setFocusToFirstItem();\n                    }\n                }, 100); // Workaround for focus bug\n            }\n        });\n    }\n    function setFocusToPreviousItem() {\n        // Check which item is currently focused\n        listItems.forEach(function (element, idx) {\n            if (element.firstElementChild === document.activeElement) {\n                setTimeout(function () {\n                    if (idx > 0) {\n                        // Focus the previous item\n                        listItems[idx - 1].firstElementChild.focus();\n                    }\n                    else {\n                        setFocusToLastItem();\n                    }\n                }, 100); // Workaround for focus bug\n            }\n        });\n    }\n    /**\n      This handler is responsible for keyboard input when items inside the userbar are focused.\n      It should only listen when the userbar is open.\n  \n      It is responsible for:\n      - Shifting focus using the arrow / home / end keys.\n      - Closing the menu when 'Escape' is pressed.\n    */\n    function handleUserbarItemsKeyDown(event) {\n        // Only handle keyboard input if the userbar is open\n        if (trigger.getAttribute('aria-expanded') === 'true') {\n            if (event.key === 'Escape') {\n                hideUserbar();\n                setFocusToTrigger();\n                return;\n            }\n            if (isFocusOnItems()) {\n                switch (event.key) {\n                    case 'ArrowDown':\n                        event.preventDefault();\n                        setFocusToNextItem();\n                        break;\n                    case 'ArrowUp':\n                        event.preventDefault();\n                        setFocusToPreviousItem();\n                        break;\n                    case 'Home':\n                        event.preventDefault();\n                        setFocusToFirstItem();\n                        break;\n                    case 'End':\n                        event.preventDefault();\n                        setFocusToLastItem();\n                        break;\n                    default:\n                        break;\n                }\n            }\n            return;\n        }\n    }\n    /**\n      This handler is responsible for opening the userbar with the arrow keys\n      if it's focused and not open yet. It should always be listening.\n    */\n    function handleTriggerKeyDown(event) {\n        // Check if the userbar is focused (but not open yet) and should be opened by keyboard input\n        if (trigger === document.activeElement && trigger.getAttribute('aria-expanded') === 'false') {\n            switch (event.key) {\n                case 'ArrowUp':\n                    event.preventDefault();\n                    showUserbar(false);\n                    // Workaround for focus bug\n                    // Needs extra delay to account for the userbar open animation. Otherwise won't focus properly.\n                    setTimeout(function () { return setFocusToLastItem(); }, 300);\n                    break;\n                case 'ArrowDown':\n                    event.preventDefault();\n                    showUserbar(false);\n                    // Workaround for focus bug\n                    // Needs extra delay to account for the userbar open animation. Otherwise won't focus properly.\n                    setTimeout(function () { return setFocusToFirstItem(); }, 300);\n                    break;\n                default:\n                    break;\n            }\n        }\n    }\n    function sandboxClick(e2) {\n        e2.stopPropagation();\n    }\n    function clickOutside() {\n        hideUserbar();\n    }\n});\n"],"sourceRoot":""}